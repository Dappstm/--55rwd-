import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Generate synthetic demo data
np.random.seed(42)
dates = pd.date_range(start="2024-11-01", end="2024-11-22", freq="H")
close_prices = 100 + np.cumsum(np.random.randn(len(dates)))  # Random walk for demo

# Create a demo DataFrame
data = pd.DataFrame({'Date': dates, 'Close': close_prices})
data.set_index('Date', inplace=True)

# Parameters for indicator lines
length_a = 21  # Placeholder for Line A calculation
length_b = 34  # Placeholder for Line B calculation

# Calculate demo Line A and Line B
# These placeholders should be replaced with the actual LeMan Trend logic
data['Line_A'] = data['Close'].rolling(window=length_a).mean()  # Moving average for Line A
data['Line_B'] = data['Close'].rolling(window=length_b).mean()  # Moving average for Line B

# Generate buy/sell signals based on crossovers
data['Signal'] = np.where(data['Line_A'] > data['Line_B'], 1, -1)
data['Signal_Change'] = data['Signal'].diff()

# Plotting the demo LeMan Trend Indicator
plt.figure(figsize=(14, 7))
plt.plot(data['Close'], label='Close Price', color='black', alpha=0.6)
plt.plot(data['Line_A'], label='Line A (Demo)', color='green', linestyle='-')
plt.plot(data['Line_B'], label='Line B (Demo)', color='red', linestyle='-')

# Mark buy/sell points
buy_signals = data[data['Signal_Change'] == 2]  # Buy signals where Line A crosses above Line B
sell_signals = data[data['Signal_Change'] == -2]  # Sell signals where Line A crosses below Line B

plt.scatter(buy_signals.index, buy_signals['Close'], label='Buy Signal', color='blue', marker='^', alpha=1)
plt.scatter(sell_signals.index, sell_signals['Close'], label='Sell Signal', color='orange', marker='v', alpha=1)

plt.title('Demo: LeMan Trend Indicator - Crossover Signals')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.grid(alpha=0.3)
plt.show()